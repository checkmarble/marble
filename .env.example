#
# REQUIRED SETTINGS
#

ENV=development
NODE_ENV=production

# Ports respectively used by the backend API and the frontends.
API_PORT=8080
APP_PORT=3000

# Ports on the host Docker will listen on.
HOST_API_PORT=8080
HOST_APP_PORT=3000

# Set this to the domain and port used by your users to access Marble's frontend. The second one must include the scheme (e.g http://).
MARBLE_APP_HOST="localhost:3000"
MARBLE_APP_DOMAIN="http://localhost:3000"

# Set those values to the URLs the Marble API can be reached at. Both must include the scheme (e.g http://)
# "MARBLE_API_DOMAIN_SERVER" must be reachable from the frontend host.
# "MARBLE_API_DOMAIN_CLIENT" must be reachable from the user's browser.
MARBLE_API_DOMAIN_SERVER="http://api:8080"
MARBLE_API_DOMAIN_CLIENT="http://localhost:8080"

# Set your license key here if you have one in order to access premium features.
LICENSE_KEY=

# RSA private key, in PEM format, used for for signing authentication tokens. MUST be changed for production.
# We recommend using AUTHENTICATION_JWT_SIGNING_KEY_FILE to point to a private key on disk.
# To generate a private key, use `openssl genrsa -out /path/to/private/key.pem 4096`.
# If left empty, will be regenerated on every app restart.
AUTHENTICATION_JWT_SIGNING_KEY=

# Or by setting each piece of information in those variables:
PG_HOSTNAME=db
PG_PORT=54321
PG_USER=postgres
PG_PASSWORD=marble

# Change the three settings below to create your initial organization and users.
# The user must also have a matching account in the authentication store used (in Firebase, for example).
# Subsequent users will be able to be created from the application.
CREATE_ORG_NAME=Zorg
CREATE_ORG_ADMIN_EMAIL=jbe@zorg.com

# Configure the ID of your Firebase project for authentication and the path to the service account's JSON private key file.
#  - The 'Project ID' can be found in the 'General' section of your Firebase project's settings page.
#  - The private key must be generated in the 'Serv
GOOGLE_CLOUD_PROJECT="test-project"
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/private/key.json

# Configure the document blob storage backend.
# The example values MUST be changed for anything but a local test environment since the file provider does not support all features.
#
# Several blob storage implementations are supported:
#  - 'file://{path}?create_dir=true' (see https://pkg.go.dev/gocloud.dev/blob/fileblob#URLOpener)
#  - 'gs://{bucket_name}' for Google Cloud Storage
#  - 's3://{bucket_name}' for AWS S3 or any S3-compatible platform (Minio, ...)
#  - 'azblob://{bucket_name}' for Azure Blob Storage
#
# Depending on the used cloud provider, the idiomatic way to discover credentials will be used, such as:
#  - GOOGLE_APPLICATION_CREDENTIALS or Application Default Credentials for Google Cloud Platform
#  - AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY or default profile for Amazon Web Services
#  - AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_KEY or equivalent for Azure
#
# If you are using Minio, you should use the S3 provider with some options set, depending on your setup, for example:
#  - s3://marble?awssdk=v1&endpoint=https://minio.local&s3ForcePathStyle=true
# When testing Marble, you can add the 'requireSSL=false' query parameter to connect in cleartext.
#
# See https://gocloud.dev/howto/blob/ for more details.
INGESTION_BUCKET_URL="file://./tempFiles/data-ingestion-bucket?create_dir=true"
CASE_MANAGER_BUCKET_URL="file://./tempFiles/case-manager-bucket?create_dir=true"
TRANSFER_CHECK_ENRICHMENT_BUCKET_URL="file://./tempFiles/transfercheck-bucket?create_dir=true"

# Configure the connection details to your Metabase instance.
#  - To retrieve the JWT signing key, go to your Metabase admin panel, in 'Settings', then 'Embedding', and click 'Manage' under 'Static embedding'
METABASE_SITE_URL="https://your_subdomain.metabaseapp.com"
METABASE_JWT_SIGNING_KEY="dummy"
METABASE_GLOBAL_DASHBOARD_ID=123

# Configure your Firebase project to allow username and password authentication.
FIREBASE_PROJECT_ID=
FIREBASE_API_KEY=

SESSION_SECRET=SESSION_SECRET
SESSION_MAX_AGE=43200

#
# OPTIONAL SETTINGS
#

# You can adjust the URLs used to access the Firebase emulator.
#  - The "FIREBASE_AUTH_EMULATOR_HOST_CLIENT" URL needs to be accessible from your browser.
#  - The "FIREBASE_AUTH_EMULATOR_HOST_SERVER" URL needs to be accessible from the API container.
FIREBASE_AUTH_EMULATOR_HOST_CLIENT=localhost:9099
FIREBASE_AUTH_EMULATOR_HOST_SERVER=firebase-auth:9099
FIREBASE_AUTH_EMULATOR_PORT=9099

# If you need to support federated authentication through Firebase, you will need to configure the following settings:
# To retrieve those value, go into the settings of your Firebase project, and register a new app from the 'General' tab.
# The two information below will be provided to you after that. 
# FIREBASE_APP_ID=
# FIREBASE_AUTH_DOMAIN=
